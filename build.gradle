import java.time.Instant

/*
plugins {
  id "edu.sc.seis.macAppBundle" version "2.1.1"
}
*/
['java', 'distribution', /*'checkstyle', */'maven', 'eclipse' ].each { apply plugin: it }

group = 'com.fifesoft'

assert JavaVersion.current().isJava11Compatible()

configurations.all { // Check for updates every build
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
	compile('com.fifesoft.rtext:fife.common:3.0.0') { changing = true }

	compile('com.fifesoft:rsyntaxtextarea:3.0.2')
	compile('com.fifesoft:autocomplete:3.0.0')
	compile('com.fifesoft:rstaui:3.0.0')
	compile('com.fifesoft:spellchecker:3.0.0')
	compile('com.fifesoft:languagesupport:3.0.0')

	compile 'net.sf.jtidy:jtidy:r938'
	compile 'org.codehaus.groovy:groovy-all:2.5.+'
	compile 'com.esotericsoftware:jsonbeans:0.7'

	testCompile 'junit:junit:4.12'
}
repositories {
	mavenCentral()
	mavenLocal()
	maven {
		url 'https://oss.sonatype.org/content/repositories/snapshots'
	}
}

// Regenerate local gradlew
wrapper {
	gradleVersion '5.0'
}

//checkstyle {
//	toolVersion = '8.14'
//	configFile = 'config/checkstyle/checkstyle.xml' as File
//}

static isSubstanceJar(jarName) {
	return jarName.startsWith('radiance-')
}
static isPluginJar(jarName) {
	return jarName.startsWith('plugin-') ||
		jarName.startsWith('groovy') || jarName.startsWith('jsonbeans') ||
		jarName.startsWith('jtidy') || jarName.startsWith('languagesupport') ||
		jarName.startsWith('rhino') || jarName.startsWith('tidy')
}

compileJava {
	sourceCompatibility javaVersion
	targetCompatibility javaVersion
	options.debug = true
	options.debugOptions.debugLevel = 'source,vars,lines'
	options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
}

ext.sharedManifest = manifest {
	attributes(
		'Specification-Title': 'rtext',
		'Specification-Version': version,
		'Implementation-Title': 'org.fife.rtext',
		'Implementation-Version': version,
		'Build-Date': Instant.now().toString(),
		'Main-Class': 'org/fife/rtext/RText',
		// OfficeLnFs are only available on Windows but still need to be on the classpath
		'Class-Path': configurations.runtime.findAll { !isPluginJar(it.name) }.collect {
							def name = it.name
							println name
							if (isSubstanceJar(name)) {
								name = 'lnfs/substance/' + name
							}
							return name
						}.join(' ') + ' lnfs/OfficeLnFs.jar'
	)
}
jar {
	manifest { from sharedManifest }
	include 'org/fife/**'
	exclude 'org/fife/rtext/plugins/**'
//	archiveName 'rtext.jar'
}

// RText is odd in that we generate multiple jars from a single source tree.
//task mainJar(type: Jar) {
//}
task consoleJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/console/**'
		archiveName 'plugin-console.jar'
	}
	manifest {
		attributes(
			'Fife-Plugin-Class': 'org.fife.rtext.plugins.console.Plugin',
			'Fife-Plugin-Load-Priority': 'normal'
		)
	}
}
task fileSystemTreeJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/filesystemtree/**'
		archiveName 'plugin-fileSystemTree.jar'
	}
	manifest {
		attributes(
			'Fife-Plugin-Class': 'org.fife.rtext.plugins.filesystemtree.FileSystemTreePlugin',
			'Fife-Plugin-Load-Priority': 'normal'
		)
	}
}
task heapIndicatorJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/heapindicator/**'
		archiveName 'plugin-heapIndicator.jar'
	}
	manifest {
		attributes(
			'Fife-Plugin-Class': 'org.fife.rtext.plugins.heapindicator.HeapIndicatorPlugin',
			'Fife-Plugin-Load-Priority': 'low'
		)
	}
}
task macroSupportJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/macros/**'
		archiveName 'plugin-macros.jar'
	}
	manifest {
		attributes(
			'Fife-Plugin-Class': 'org.fife.rtext.plugins.macros.MacroPlugin',
			'Fife-Plugin-Load-Priority': 'normal'
		)
	}
}
task projectSupportJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/project/**'
		archiveName 'plugin-projects.jar'
	}
	manifest {
		attributes(
			'Fife-Plugin-Class': 'org.fife.rtext.plugins.project.ProjectPlugin',
			'Fife-Plugin-Load-Priority': 'normal'
		)
	}
}
task languageSupportJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/langsupport/**'
		archiveName 'plugin-languageSupport.jar'
	}
	manifest {
		attributes(
			'Fife-Plugin-Class': 'org.fife.rtext.plugins.langsupport.Plugin',
			'Fife-Plugin-Load-Priority': 'normal'
		)
	}
}
task sourceBrowserJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/sourcebrowser/**'
		archiveName 'plugin-sourceBrowser.jar'
	}
	manifest {
		attributes(
			'Fife-Plugin-Class': 'org.fife.rtext.plugins.sourcebrowser.SourceBrowserPlugin',
			'Fife-Plugin-Load-Priority': 'high'
		)
	}
}
task taskListJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/tasks/**'
		archiveName 'plugin-tasks.jar'
	}
	manifest {
		attributes(
			'Fife-Plugin-Class': 'org.fife.rtext.plugins.tasks.TasksPlugin',
			'Fife-Plugin-Load-Priority': 'normal'
		)
	}
}
task tidyJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/tidy/**'
		archiveName 'plugin-tidy.jar'
	}
	manifest {
		attributes(
			'Fife-Plugin-Class': 'org.fife.rtext.plugins.tidy.Plugin',
			'Fife-Plugin-Load-Priority': 'normal'
		)
	}
}
task toolsJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/tools/**'
		archiveName 'plugin-tools.jar'
	}
	manifest {
		attributes(
			'Fife-Plugin-Class': 'org.fife.rtext.plugins.tools.ToolPlugin',
			'Fife-Plugin-Load-Priority': 'normal'
		)
	}
}
task javadocJar (type: Jar, dependsOn: javadoc) {
	manifest { from sharedManifest }
	classifier = 'javadoc'
	from javadoc.destinationDir
}
task sourceJar (type: Jar) {
	manifest { from sharedManifest }
	classifier = 'sources'
	from sourceSets.main.allSource
}
artifacts {
	archives /*mainJar,*/ consoleJar, fileSystemTreeJar, heapIndicatorJar,
			macroSupportJar, projectSupportJar, languageSupportJar,
			sourceBrowserJar, taskListJar, tidyJar, toolsJar,
			javadocJar, sourceJar
}

def getDistributionFiles(configurations) {

	def distFiles = [
			'build/libs', // The built jars
			configurations.runtime // Gradle dependencies
	]

	// Copy native libraries from FifeCommon, if it's checked out alongside this project
	def fifeCommonNativesDir = new File("${projectDir.absolutePath}/../FifeCommon/native")
	if (fifeCommonNativesDir.isDirectory()) {
		distFiles += fifeCommonNativesDir.listFiles().collect { it.getAbsolutePath() }
	}

	return distFiles
}

distributions {
	main {

		baseName = 'rtext'
		contents {
			exclude([ '**/*-sources.jar', '**/*-javadoc.jar' ])
			from { getDistributionFiles(configurations) }
			eachFile { details ->
				def path = details.path
				if (isSubstanceJar(path)) {
					//println "Is a substance jar: ${path}"
					details.path = "lnfs/substance/" + path
				}
				else if (isPluginJar(path)) {
					//println "Is a plugin jar: ${path}"
					details.path = "plugins/" + path
				}
				else if (path.contains("-javadoc.jar") || path.contains("-source.jar")) {
					// Ignore
				}
				else if (path.contains("RText-") && path.endsWith(".jar")) {
					details.path = "RText.jar"
				}
			}
//			rename 'substance\\-.+', 'lnfs/substance/$0'
//			rename "(.+)\\-${version}\\.jar", '$1.jar'
		}
	}
	src {
		baseName = 'rtext'
	}
}

srcDistZip.classifier = 'src'
srcDistZip {
	from projectDir
	include '.classpath'
	include '.gitignore'
	include '.project'
	include 'build.gradle'
	include 'gradle.properties'
	include 'gradle/**/*'
	include 'gradlew*'
	include 'lib/**'
	include 'mac/**'
	include 'README.md'
	include '.settings/**'
	include 'MakeRTextIntaller.nsi'
	include 'RText.exe'
	include 'src/**'
	include 'TO-DO'
}

def getJreDependencyList = { installDistDir ->

	// Store the output instead of printing to the console
	def stdout = new ByteArrayOutputStream()

	exec {
		workingDir installDistDir
		commandLine "${jdkRoot}/bin/jdeps", '--list-deps', 'RText.jar', 'plugins/plugin*.jar'
		standardOutput = stdout
	}

	def retVal =  String.join(',', stdout.toString().split('[ \t\r\n]+'))
	if (retVal[0] == ',') {
		retVal = retVal.substring(1)
	}
	return retVal
}

task generateJre {
	doLast {

		def installDistDir = 'build/install/rtext'

		def moduleList = getJreDependencyList(installDistDir)
		println "Generating JRE with modules: ${moduleList}"

		exec {
			workingDir installDistDir
			commandLine "${jdkRoot}/bin/jlink", '--module-path', "\"${jdkRoot}/jmods\"", '--add-modules',
					moduleList, '--output', embeddedJreFolderName, '--strip-debug', '--compress', '2',
					'--no-header-files', '--no-man-pages'
		}
	}
}
generateJre.dependsOn('installDist')

task generateWindowsStarterExe {
	doLast {
		exec {
			commandLine launch4jExe, 'launch4j.xml'
		}
	}
}
generateWindowsStarterExe.dependsOn('generateJre')

/* Mac .app plugin config.  Uncomment this and run './gradlew createApp'
 * after './gradlew clean build installDist'.
copyToResourcesJava {
	include 'src/main/dist/**'
}

macAppBundle {
    mainClassName = "org.fife.rtext.RText"
    icon = "RText.icns"
    bundleJRE = true
    javaProperties.put("apple.laf.useScreenMenuBar", "true")
//    backgroundImage = "doc/macbackground.png"
}
*/
