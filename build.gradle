["java", "distribution", "maven" ].each { apply plugin: it }

group = "com.fifesoft"

dependencies {
	compile(
		
		files( "${projectDir.absolutePath}/../FifeCommon/build/libs/fife.common-2.6.0-SNAPSHOT.jar" ),
		// insubstantial dependencies would go away if we pulled FifeCommon from Maven
		[ "com.github.insubstantial:laf-plugin:7.2.1" ],
		[ "com.github.insubstantial:laf-widget:7.2.1" ],
		[ "com.github.insubstantial:substance:7.2.1" ],
		[ "com.github.insubstantial:trident:7.2.1" ],
		
		[ "com.fifesoft:rsyntaxtextarea:2.6.0-SNAPSHOT" ],
		[ "com.fifesoft:autocomplete:2.6.0-SNAPSHOT" ],
		[ "com.fifesoft:rstaui:2.6.0-SNAPSHOT" ],
		[ "com.fifesoft:spellchecker:2.6.0-SNAPSHOT" ],
		[ "com.fifesoft:languagesupport:2.6.0-SNAPSHOT" ],
		
		[ "net.sf.jtidy:jtidy:r938" ],
		[ "org.codehaus.groovy:groovy-all:2.+" ],
		files( "${projectDir.absolutePath}/lib/jsonbeans.jar" )
		)
	testCompile group: "junit", name: "junit", version: "4.11"
}
repositories {
	mavenCentral()
	maven {
		url "https://oss.sonatype.org/content/repositories/snapshots"
	}
}

// Regenerate local gradlew
task wrapper(type: Wrapper) {
	gradleVersion = '2.0'
}

def isSubstanceJar(def jarName) {
	return jarName.startsWith("substance-") || jarName.startsWith("trident-") ||
		jarName.startsWith("laf-")
}
def isPluginJar(def jarName) {
	return jarName.startsWith('plugin-') ||
		jarName.startsWith('groovy') || jarName.startsWith('jsonbeans') ||
		jarName.startsWith('jtidy') || jarName.startsWith('languagesupport') ||
		jarName.startsWith('rhino') || jarName.startsWith('tidy')
}
	
compileJava {
	sourceCompatibility javaVersion
	targetCompatibility javaVersion
	options.debug = true
	options.debugOptions.debugLevel = "source,vars,lines"
	// Most folks will compile with the latest JDK available, but official builds
	// use a Java 5 JDK.  Add this property to gradle.properties for boot classpath
	if (project.hasProperty("java5CompileBootClasspath")) {
		if (new File(java5CompileBootClasspath).isFile()) {
			println "Bootstrap classpath when compiling Java: ${java5CompileBootClasspath}"
			options.bootClasspath = java5CompileBootClasspath
		}
		else {
			println "Warning: Specified java5CompileBootClasspath does not exist: ${java5CompileBootClasspath}"
		}
	}
	else {
		println "Note: It is recommended to set your boot classpath to a Java 5 JDK, which you have not done."
	}
	options.compilerArgs << "-Xlint:deprecation" //<< '-Xlint:unchecked'
}

ext.sharedManifest = manifest {
	attributes(
		'Specification-Title': 'rtext',
		'Specification-Version': version,
		'Implementation-Title': 'org.fife.rtext',
		'Implementation-Version': version,
		'Main-Class': 'org/fife/rtext/RText',
		// OfficeLnFs are only available on Windows but still need to be on the classpath
		'Class-Path': configurations.runtime.findAll { !isPluginJar(it.name) }.collect {
							def name = it.name
							if (isSubstanceJar(name)) {
								name = "lnfs/substance/" + name
							}
							return name
						}.join(' ')
	)
}
jar {
	manifest { from sharedManifest }
	include 'org/fife/**'
	exclude 'org/fife/rtext/plugins/**'
//	archiveName 'rtext.jar'
}

// RText is odd in that we generate multiple jars from a single source tree.
//task mainJar(type: Jar) {
//}
task consoleJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/console/**'
		archiveName 'plugin-console.jar'
	}
}
task fileSystemTreeJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/filesystemtree/**'
		archiveName 'plugin-fileSystemTree.jar'
	}
}
task heapIndicatorJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/heapindicator/**'
		archiveName 'plugin-heapIndicator.jar'
	}
}
task macroSupportJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/macros/**'
		archiveName 'plugin-macros.jar'
	}
}
task projectSupportJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/project/**'
		archiveName 'plugin-projects.jar'
	}
}
task languageSupportJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/langsupport/**'
		archiveName 'plugin-languageSupport.jar'
	}
}
task sourceBrowserJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/sourcebrowser/**'
		archiveName 'plugin-sourceBrowser.jar'
	}
}
task taskListJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/tasks/**'
		archiveName 'plugin-tasks.jar'
	}
}
task tidyJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/tidy/**'
		archiveName 'plugin-tidy.jar'
	}
}
task toolsJar(type: Jar) {
	from (sourceSets.main.output) {
		include 'org/fife/rtext/plugins/tools/**'
		archiveName 'plugin-tools.jar'
	}
}
task javadocJar (type: Jar, dependsOn: javadoc) {
	manifest { from sharedManifest }
	classifier = 'javadoc'
	from javadoc.destinationDir
}
task sourceJar (type: Jar) {
	manifest { from sharedManifest }
	classifier = 'sources'
	from sourceSets.main.allSource
}
artifacts {
	archives /*mainJar,*/ consoleJar, fileSystemTreeJar, heapIndicatorJar,
			macroSupportJar, projectSupportJar, languageSupportJar,
			sourceBrowserJar, taskListJar, tidyJar, toolsJar,
			javadocJar, sourceJar
}

distributions {
	main {
		
		baseName = 'rtext'
		contents {
			exclude([ '**/*-sources.jar', '**/*-javadoc.jar' ])
			from { [
				'lib', // Dependencies not in Maven
				"build/libs", // The built jars
				configurations.runtime // Gradle dependencies
			] }
			eachFile { details ->
				def path = details.path
				if (isSubstanceJar(path)) {
					details.path = "lnfs/substance/" + path
				}
				else if (isPluginJar(path)) {
					details.path = "plugins/" + path
				}
				else if (path.contains("-javadoc.jar") || path.contains("-source.jar")) {
					
				}
			}
//			rename 'substance\\-.+', 'lnfs/substance/$0'
//			rename "(.+)\\-${version}\\.jar", '$1.jar'
		}
	}
}